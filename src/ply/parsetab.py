
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PROGRAMADD AND ASSIGN CLOSING COMMA DIV DO DOT ENDFOR ENDIF EQ FALSE FOR GT IF IN INTEGER LPAREN LT MUL NE OPENING OR PRINT RPAREN SEMICOLON STRING SUB TRUE TXT VARIABLE\n    BOOLEAN_EXPRESSION : BOOLEAN_EXPRESSION BOOLEAN_OPERATOR BOOLEAN_EXPRESSION\n    \n    STRING_LIST_INTERIOR : STRING COMMA STRING_LIST_INTERIOR\n    \n    MATH_EXPRESSION : MATH_EXPRESSION ADD TERM\n    \n    BOOLEAN_EXPRESSION : BOOLEAN\n    \n    MATH_EXPRESSION : MATH_EXPRESSION SUB TERM\n    \n    STRING_LIST_INTERIOR : STRING\n    \n    MATH_EXPRESSION : TERM\n    \n    BOOLEAN : TRUE\n            | FALSE\n    \n    STRING_LIST : LPAREN STRING_LIST_INTERIOR RPAREN\n    \n    TERM : TERM MUL FACTOR\n    \n    BOOLEAN_OPERATOR : AND\n    \n    TERM : TERM DIV FACTOR\n    \n    EXPRESSION : VARIABLE ASSIGN STRING_EXPRESSION\n               | VARIABLE ASSIGN STRING_LIST\n               | VARIABLE ASSIGN MATH_EXPRESSION\n               | VARIABLE ASSIGN BOOLEAN_EXPRESSION\n    \n    BOOLEAN_OPERATOR : OR\n    \n    TERM : FACTOR\n    \n    FACTOR : INTEGER\n    \n    BOOLEAN_EXPRESSION : MATH_EXPRESSION INTEGER_COMPARATOR MATH_EXPRESSION\n    \n    STRING_EXPRESSION : STRING_EXPRESSION DOT STRING_EXPRESSION\n    \n    FACTOR : VARIABLE\n    \n    STRING_EXPRESSION : STRING\n    \n    STRING_EXPRESSION : VARIABLE\n    \n    INTEGER_COMPARATOR : LT\n                       | GT\n                       | EQ\n                       | NE\n    \n    EXPRESSION : FOR VARIABLE IN STRING_LIST DO EXPRESSION_LIST ENDFOR\n    \n    EXPRESSION : FOR VARIABLE IN VARIABLE DO EXPRESSION_LIST ENDFOR\n    \n    EXPRESSION : PRINT STRING_EXPRESSION\n    \n    EXPRESSION : MATH_EXPRESSION\n    \n    EXPRESSION : BOOLEAN_EXPRESSION\n    \n    EXPRESSION : IF_EXPRESSION\n    \n    IF_EXPRESSION : IF BOOLEAN_EXPRESSION DO EXPRESSION_LIST ENDIF\n    \n    EXPRESSION_LIST : EXPRESSION SEMICOLON\n    \n    EXPRESSION_LIST : EXPRESSION SEMICOLON EXPRESSION_LIST\n    \n    DUMBO_BLOCK : OPENING EXPRESSION_LIST CLOSING\n    \n    PROGRAM : DUMBO_BLOCK PROGRAM\n    \n    PROGRAM : TXT PROGRAM\n    \n    PROGRAM : DUMBO_BLOCK\n    \n    PROGRAM : TXT\n    '
    
_lr_action_items = {'TXT':([0,2,3,22,],[3,3,3,-39,]),'OPENING':([0,2,3,22,],[4,4,4,-39,]),'$end':([1,2,3,5,6,22,],[0,-42,-43,-40,-41,-39,]),'VARIABLE':([4,12,13,17,23,24,25,26,27,28,29,30,31,32,33,34,39,40,55,56,59,68,69,],[9,35,38,43,9,45,43,43,43,-26,-27,-28,-29,43,-12,-18,43,43,62,38,9,9,9,]),'FOR':([4,23,59,68,69,],[12,12,12,12,12,]),'PRINT':([4,23,59,68,69,],[13,13,13,13,13,]),'IF':([4,23,59,68,69,],[17,17,17,17,17,]),'TRUE':([4,17,23,24,32,33,34,59,68,69,],[19,19,19,19,19,-12,-18,19,19,19,]),'FALSE':([4,17,23,24,32,33,34,59,68,69,],[20,20,20,20,20,-12,-18,20,20,20,]),'INTEGER':([4,17,23,24,25,26,27,28,29,30,31,32,33,34,39,40,59,68,69,],[21,21,21,21,21,21,21,-26,-27,-28,-29,21,-12,-18,21,21,21,21,21,]),'CLOSING':([7,23,44,],[22,-37,-38,]),'SEMICOLON':([8,9,10,11,14,15,16,18,19,20,21,36,37,38,43,45,46,47,48,49,51,52,53,54,57,58,64,66,70,74,75,],[23,-23,-33,-34,-35,-7,-4,-19,-8,-9,-20,-32,-24,-25,-23,-23,-14,-15,-16,-17,-3,-5,-21,-1,-11,-13,-22,-10,-36,-31,-30,]),'ASSIGN':([9,],[24,]),'MUL':([9,15,18,21,43,45,51,52,57,58,],[-23,39,-19,-20,-23,-23,39,39,-11,-13,]),'DIV':([9,15,18,21,43,45,51,52,57,58,],[-23,40,-19,-20,-23,-23,40,40,-11,-13,]),'ADD':([9,10,15,18,21,42,43,45,48,51,52,53,57,58,],[-23,25,-7,-19,-20,25,-23,-23,25,-3,-5,25,-11,-13,]),'SUB':([9,10,15,18,21,42,43,45,48,51,52,53,57,58,],[-23,26,-7,-19,-20,26,-23,-23,26,-3,-5,26,-11,-13,]),'LT':([9,10,15,18,21,42,43,45,48,51,52,57,58,],[-23,28,-7,-19,-20,28,-23,-23,28,-3,-5,-11,-13,]),'GT':([9,10,15,18,21,42,43,45,48,51,52,57,58,],[-23,29,-7,-19,-20,29,-23,-23,29,-3,-5,-11,-13,]),'EQ':([9,10,15,18,21,42,43,45,48,51,52,57,58,],[-23,30,-7,-19,-20,30,-23,-23,30,-3,-5,-11,-13,]),'NE':([9,10,15,18,21,42,43,45,48,51,52,57,58,],[-23,31,-7,-19,-20,31,-23,-23,31,-3,-5,-11,-13,]),'AND':([11,15,16,18,19,20,21,41,43,49,51,52,53,54,57,58,],[33,-7,-4,-19,-8,-9,-20,33,-23,33,-3,-5,-21,33,-11,-13,]),'OR':([11,15,16,18,19,20,21,41,43,49,51,52,53,54,57,58,],[34,-7,-4,-19,-8,-9,-20,34,-23,34,-3,-5,-21,34,-11,-13,]),'STRING':([13,24,50,56,67,],[37,37,61,37,61,]),'DO':([15,16,18,19,20,21,41,43,51,52,53,54,57,58,62,63,66,],[-7,-4,-19,-8,-9,-20,59,-23,-3,-5,-21,-1,-11,-13,68,69,-10,]),'ENDIF':([23,44,65,],[-37,-38,70,]),'ENDFOR':([23,44,72,73,],[-37,-38,74,75,]),'LPAREN':([24,55,],[50,50,]),'IN':([35,],[55,]),'DOT':([36,37,38,45,46,64,],[56,-24,-25,-25,56,56,]),'RPAREN':([60,61,71,],[66,-6,-2,]),'COMMA':([61,],[67,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'PROGRAM':([0,2,3,],[1,5,6,]),'DUMBO_BLOCK':([0,2,3,],[2,2,2,]),'EXPRESSION_LIST':([4,23,59,68,69,],[7,44,65,72,73,]),'EXPRESSION':([4,23,59,68,69,],[8,8,8,8,8,]),'MATH_EXPRESSION':([4,17,23,24,27,32,59,68,69,],[10,42,10,48,53,42,10,10,10,]),'BOOLEAN_EXPRESSION':([4,17,23,24,32,59,68,69,],[11,41,11,49,54,11,11,11,]),'IF_EXPRESSION':([4,23,59,68,69,],[14,14,14,14,14,]),'TERM':([4,17,23,24,25,26,27,32,59,68,69,],[15,15,15,15,51,52,15,15,15,15,15,]),'BOOLEAN':([4,17,23,24,32,59,68,69,],[16,16,16,16,16,16,16,16,]),'FACTOR':([4,17,23,24,25,26,27,32,39,40,59,68,69,],[18,18,18,18,18,18,18,18,57,58,18,18,18,]),'INTEGER_COMPARATOR':([10,42,48,],[27,27,27,]),'BOOLEAN_OPERATOR':([11,41,49,54,],[32,32,32,32,]),'STRING_EXPRESSION':([13,24,56,],[36,46,64,]),'STRING_LIST':([24,55,],[47,63,]),'STRING_LIST_INTERIOR':([50,67,],[60,71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> PROGRAM","S'",1,None,None,None),
  ('BOOLEAN_EXPRESSION -> BOOLEAN_EXPRESSION BOOLEAN_OPERATOR BOOLEAN_EXPRESSION','BOOLEAN_EXPRESSION',3,'p_booleanexpression','bool.py',7),
  ('STRING_LIST_INTERIOR -> STRING COMMA STRING_LIST_INTERIOR','STRING_LIST_INTERIOR',3,'p_stringlistinterior_double','base.py',12),
  ('MATH_EXPRESSION -> MATH_EXPRESSION ADD TERM','MATH_EXPRESSION',3,'p_mathexpression_plus','math.py',12),
  ('BOOLEAN_EXPRESSION -> BOOLEAN','BOOLEAN_EXPRESSION',1,'p_booleanexpression_simple','bool.py',19),
  ('MATH_EXPRESSION -> MATH_EXPRESSION SUB TERM','MATH_EXPRESSION',3,'p_mathexpression_minus','math.py',19),
  ('STRING_LIST_INTERIOR -> STRING','STRING_LIST_INTERIOR',1,'p_stringlistinterior_single','base.py',23),
  ('MATH_EXPRESSION -> TERM','MATH_EXPRESSION',1,'p_mathexpression_TERM','math.py',26),
  ('BOOLEAN -> TRUE','BOOLEAN',1,'p_boolean','bool.py',28),
  ('BOOLEAN -> FALSE','BOOLEAN',1,'p_boolean','bool.py',29),
  ('STRING_LIST -> LPAREN STRING_LIST_INTERIOR RPAREN','STRING_LIST',3,'p_stringlist','base.py',32),
  ('TERM -> TERM MUL FACTOR','TERM',3,'p_term_times','math.py',33),
  ('BOOLEAN_OPERATOR -> AND','BOOLEAN_OPERATOR',1,'p_booleanoperator_and','bool.py',38),
  ('TERM -> TERM DIV FACTOR','TERM',3,'p_term_div','math.py',40),
  ('EXPRESSION -> VARIABLE ASSIGN STRING_EXPRESSION','EXPRESSION',3,'p_expression_assignments','base.py',41),
  ('EXPRESSION -> VARIABLE ASSIGN STRING_LIST','EXPRESSION',3,'p_expression_assignments','base.py',42),
  ('EXPRESSION -> VARIABLE ASSIGN MATH_EXPRESSION','EXPRESSION',3,'p_expression_assignments','base.py',43),
  ('EXPRESSION -> VARIABLE ASSIGN BOOLEAN_EXPRESSION','EXPRESSION',3,'p_expression_assignments','base.py',44),
  ('BOOLEAN_OPERATOR -> OR','BOOLEAN_OPERATOR',1,'p_booleanoperator_or','bool.py',47),
  ('TERM -> FACTOR','TERM',1,'p_term_factor','math.py',47),
  ('FACTOR -> INTEGER','FACTOR',1,'p_factor_num','math.py',54),
  ('BOOLEAN_EXPRESSION -> MATH_EXPRESSION INTEGER_COMPARATOR MATH_EXPRESSION','BOOLEAN_EXPRESSION',3,'p_integercomparison','bool.py',56),
  ('STRING_EXPRESSION -> STRING_EXPRESSION DOT STRING_EXPRESSION','STRING_EXPRESSION',3,'p_stringexpression_double','base.py',57),
  ('FACTOR -> VARIABLE','FACTOR',1,'p_factor_var','math.py',61),
  ('STRING_EXPRESSION -> STRING','STRING_EXPRESSION',1,'p_string_expression_string','base.py',66),
  ('STRING_EXPRESSION -> VARIABLE','STRING_EXPRESSION',1,'p_string_expression_variable','base.py',76),
  ('INTEGER_COMPARATOR -> LT','INTEGER_COMPARATOR',1,'p_integercomparator','bool.py',76),
  ('INTEGER_COMPARATOR -> GT','INTEGER_COMPARATOR',1,'p_integercomparator','bool.py',77),
  ('INTEGER_COMPARATOR -> EQ','INTEGER_COMPARATOR',1,'p_integercomparator','bool.py',78),
  ('INTEGER_COMPARATOR -> NE','INTEGER_COMPARATOR',1,'p_integercomparator','bool.py',79),
  ('EXPRESSION -> FOR VARIABLE IN STRING_LIST DO EXPRESSION_LIST ENDFOR','EXPRESSION',7,'p_expression_strlistfor','base.py',93),
  ('EXPRESSION -> FOR VARIABLE IN VARIABLE DO EXPRESSION_LIST ENDFOR','EXPRESSION',7,'p_expression_varfor','base.py',105),
  ('EXPRESSION -> PRINT STRING_EXPRESSION','EXPRESSION',2,'p_expression_print','base.py',117),
  ('EXPRESSION -> MATH_EXPRESSION','EXPRESSION',1,'p_expression_mathexpression','base.py',126),
  ('EXPRESSION -> BOOLEAN_EXPRESSION','EXPRESSION',1,'p_expression_booleanexpression','base.py',135),
  ('EXPRESSION -> IF_EXPRESSION','EXPRESSION',1,'p_expression_ifexpression','base.py',144),
  ('IF_EXPRESSION -> IF BOOLEAN_EXPRESSION DO EXPRESSION_LIST ENDIF','IF_EXPRESSION',5,'p_ifexpression','base.py',153),
  ('EXPRESSION_LIST -> EXPRESSION SEMICOLON','EXPRESSION_LIST',2,'p_expression_list_single','base.py',165),
  ('EXPRESSION_LIST -> EXPRESSION SEMICOLON EXPRESSION_LIST','EXPRESSION_LIST',3,'p_expression_list_multiple','base.py',174),
  ('DUMBO_BLOCK -> OPENING EXPRESSION_LIST CLOSING','DUMBO_BLOCK',3,'p_dumboblock','base.py',183),
  ('PROGRAM -> DUMBO_BLOCK PROGRAM','PROGRAM',2,'p_program_double_dbp','base.py',192),
  ('PROGRAM -> TXT PROGRAM','PROGRAM',2,'p_program_double_tp','base.py',201),
  ('PROGRAM -> DUMBO_BLOCK','PROGRAM',1,'p_program_single_db','base.py',210),
  ('PROGRAM -> TXT','PROGRAM',1,'p_program_single_txt','base.py',219),
]
